# Default values for cks.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

revisionHistoryLimit: 10

image:
  repository: containers.virtru.com/cks
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

testerPod:
  enabled: true
  annotations:
    helm.sh/hook: test

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations: {}
  type: ClusterIP
  port: 443
  protocol: TCP

deployment:
  port: 9000

ingress:
  enabled: true
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /*
          pathType: ImplementationSpecific
          backend:
            serviceName: cks
            servicePort: 443
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

appConfig:
  virtruOrgId: "<your org id>"
  authTokenStoreageType: in-memory
  authTokenStoreageMemoryEncoding: base64
  logRsyslogEnabled: false
  logStdoutEnabled: true
  noKeysRule: importPEM
  publicKeyPath: /run/secrets/rsa001.pub
  privateKeyPath: /run/secrets/rsa001.pem
  keyProviderType: file
  hmacAuthEnabled: true
  jwtAuthEnabled: true
  jwtAuthIssuer: https://api.virtru.com
  jwtAuthJwksPath: /acm/api/jwks

# By default, you can create secrets using the keys below.
# Important note: Creating secrets in this way is a default option.
# While a simpler approach with fewer variables, it is recommended you use
# a third party secret storage option.

appSecrets:
  virtruAuth:
    name: hmac-auth
    data:
      authTokenJson: <JSON from your CKS>

  virtruKeys:
    name: cks-keys
    mountPath: /app/keys
    data:
      rsa001.pub: |
        <rsa001 public key>
      rsa001.pem: |
        <rsa001 private key>

#https://external-secrets.io/v0.8.2/introduction/overview/
#externalAppSecrets:
#- name: <external secret object name> #secret object will be named the same.
#  secretsPath: <path of secret in secret store>
#  secretStoreRef:
#    kind: <SecretStore or ClusterSecretStore>
#    name: <name of secret store>
#  refreshInterval: <how often to reconcile with secret store>
#
