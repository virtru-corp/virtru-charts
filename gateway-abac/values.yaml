replicaCount: 2
image:
  repository: registry.opentdf.io/platform/gateway
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: false
  name: "default"
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
ingress:
  enabled: false
resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 500Mi
  # requests:
  #   cpu: 500m
  #   memory: 500Mi
nodeSelector: {}
tolerations: []
affinity: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
service:
  type: LoadBalancer
  loadBalancerIP: ""
  port: 25

smtp:
  tls:
    # -- Enable custom TLS certificates for SMTP (default: false uses self-signed generated automatically on start up)
    enabled: false
    # -- Use existing secret containing TLS certificate and key
    existingSecret: ""
    # -- Cert data in PEM format (alternative to existingSecret). Private Key Data in PEM format should be configured as secret value
    certificate: ""

# -- The existing secret that contains all of the secret values from secret-values.yaml
existingSecret:
  name: "my-existing-secret"
  # -- the name of the key in the existing secret that contains the dkimPrivateKey
  dkimPrivateKeyName: "my-dkim-private-key"
  # -- the name of the key in the existing secret that contains the xHeaderAuthSecret
  xHeaderAuthSecretName: "my-xheader-auth-secret"
  # -- the name of the key in the existing secret that contains the saslDownstreamCredentials
  saslDownstreamCredentialsName: ""
  # -- the name of the key in the existing secret that contains the saslUpstreamCredentials
  saslUpstreamCredentialsName: ""
  # -- the name of the key in the existing secret that contains the client secret that gateway should use to communicate with the platform
  abacOidcClientSecretName: ""

# -- The client-id that gateway should use to communicate with the platform
abacOidcClientId: "dsp-gateway"
# -- The URL where the platform is deployed. Hostname and port
abacPlatformEndpoint: "platform.dsp-dev-green.virtru.com:443"
# -- The URL where the taggingService is deployed. Hostname and port
abacTaggingPdpEndpoint: "platform.dsp-dev-green.virtru.com:443"
# -- The assertion type to use, currently `urn:us:gov:ic:edh` or `urn:nato:stanag:5636:A:1:elements:json`.
abacTaggingPdpAssertionType: "urn:nato:stanag:5636:A:1:elements:json"
# -- Controls whether recipients that are not entitled to receive an email are removed.
abacTrimBlockedRecipients: true
# -- Controls whether communication with the platform is over a plaintext connection
abacPlaintextConnection: false
# -- Controls whether encryption is enabled in encrypt mode. If this is set to false, the gateway will not encrypt emails.
abacEncryptEmail: true
# -- Controls whether the email body is encrypted in encrypt mode
abacEncryptEmailBody: true
# -- A list of additional Certificate Authorities(CAs) to trust when communicating with the platform in PEM format
abacExtraCas: []
# -- A list of existing secrets containing CA certificates to trust (separate from existingSecret)
abacCaSecrets: []
  # Example:
  # - secretName: "my-ca-secret"
  #   keyName: "ca.crt"
  # - secretName: "another-ca-secret"
  #   keyName: "root-ca.pem"
# Controls whether to create TDFs using the pre-4.3.0 schema. Set this to create TDFs that can be consumed by DSP versions 2.0.2 and earlier
abacCreateLegacyTdfs: true
# -- A list of KAS URLs that are allowed to be used for decryption. This is used in addition to the kas-registry defined in platform policy.
abacKasAllowlist: []
# -- This setting tells the Gateway whether or not to ignore the `kasAllowlist` when decrypting. If this is set to true, the `kasAllowlist` will be ignored and all KAS servers will be used for decryption.
# Useful for testing, but should not be used in production because authorization tokens can be sent to malicious KAS servers if gateway processes a maliciously crafted TDF.
abacIgnoreKasAllowlist: false

# -- The mode the gateway should run in, either encrypt or decrypt
gatewayMode: "encrypt"
# -- The topology the gateway should run in, either inbound or outbound
gatewayTopology: "inbound"
# -- The hostname that the gateway should use. A self-signed certificate will be generated for this hostname
gatewayHostname: ""
# -- This setting maps domains to mail servers for the next hop. e.g. example.com=>smtp.example.com,example.net=>smtp.example.net
gatewayTransportMaps: ""
# -- Comma-separated list of CIDR addresses that are allowed to relay mail through the gateway
inboundRelayAddresses: "0.0.0.0/0"

# -- The storage class to use for the persistent volume that we use to store the email queue
persistentVolumeStorageClassName: "standard"
# -- The size of the persistent volume that we use to store the email queue
persistentVolumeSize: "1Gi"
# -- The maximum amount of time a message can stay in the queue before being bounced (postfix maximal_queue_lifetime)
maxQueueLifetime: "5m"
# -- The maximum amount of time the gateway will wait before retrying a message (postfix maximal_backoff_time)
maxBackoffTime: "45s"
# -- The minimum amount of time the gateway will wait before retrying a message (postfix minimal_backoff_time)
minBackoffTime: "30s"
# -- The amount of time the gateway will wait before checking the queue for messages to send (postfix queue_run_delay)
queueRunDelay: "30s"
# -- The domain we use to rewrite the from address for inbound mail. This allows us to deliver email that is
#   authenticated by DKIM. In order for this to work DKIM must be set up for this domain
primaryMailingDomain: "example.com"
# -- The selector for the DKIM key to use for mail
dkimSelector: ""
# -- Controls whether the gateway should replace the from address with the authenticated address
replaceFromEnabled: false
# -- Controls whether the gateway should use the proxy protocol
proxyProtocol: false
# -- Controls whether the gateway should log verbose information
verboseLogging: false
# -- Controls whether the gateway should use TLS when sending mail
smtpUseTls: true
# -- The security level the gateway should use when sending mail, either `mandatory` or `opportunistic`. To use `mandatory`
# smtpUseTls must be true. `mandatory` corresponds to a postfix level of `encrypt` while `opportunistic` corresponds to a postfix level of `may`.
smtpSecurityLevel: "mandatory"
# -- The compliance level the gateway should use when sending mail downstream
smtpTlsComplianceDownstream: "MEDIUM"
# -- The security options the gateway should use when authenticating downstream
saslDownstreamSecurityOptions: "noanonymous"
# -- The mechanisms the gateway should use when receiving email
saslUpstreamMechanisms: "PLAIN"
# -- Controls whether the gateway should use TLS when receiving mail
smtpdUseTls: true
# -- The security level the gateway should use when receiving mail, either `mandatory` or `opportunistic`. To use
# `mandatory` smtpdUseTls must be true. `mandatory` corresponds to a postfix level of `encrypt` while `opportunistic` corresponds to a postfix level of `may`.
# `mandatory` also implies that authentication may only take place over TLS (`smtpd_tls_auth_only` = yes)
smtpdSecurityLevel: "mandatory"
# -- The compliance level the gateway should use when receiving mail upstream
smtpdTlsComplianceUpstream: "MEDIUM"
# -- This setting controls whether the gateway should cache outgoing SMTP connections. true to cache everything,
# false to not cache anything, or a comma-separated list of domains to cache connections for
cacheSmtpConnections: true
# -- The amount of time to cache outgoing SMTP connections for
cacheSmtpConnectionsTimeLimit: "5s"
# -- This setting maps domains to TLS policies. e.g. example.com=>may,example.net=>encrypt. Valid policies
# can be found here: https://www.postfix.org/TLS_README.html#client_tls_policy
tlsPolicyMaps: ""
# -- logLevel controls how much logging information the gateway outputs. Valid levels are `debug`, `info`, `warn`, `error`. In `debug` mode
# ciphertexts are logged
logLevel: "info"
