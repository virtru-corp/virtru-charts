replicaCount: 2

image:
  repository: virtru/gateway
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

useImagePullSecret: true

taggingPdpImage: 
  tag: c241e5077b14ab76c03c630ff743b6f3f2610484
  repo: ghcr.io/virtru-corp/tagging-pdp/tagging-pdp-grpc
  # image pull secret, also used by the grpc-gateway image if enabled.
  imageCredentials:
    username: replaceme
    password: replaceme
    email: replaceme
    registry: ghcr.io
  pullPolicy: IfNotPresent

gateway:
  imageCredentials:
    username: replaceme
    password: replaceme
    email: replaceme
    registry: docker.io

taggingService:
  port: 8080

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 25

ingress:
  enabled: false

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 500Mi
  # requests:
  #   cpu: 500m
  #   memory: 500Mi

nodeSelector: {}

tolerations: []

affinity: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Gateway Modes to enable, 
# each enabled mode will create a separate 
# deployment, service, and configmap

gatewayModes:
  outboundEncrypt:
    enabled: false
    name: outbound-encrypt
    port: 9001
  outboundDecrypt:
    enabled: false
    name: outbound-decrypt
    port: 9002
  inboundEncrypt:
    enabled: false
    name: inbound-encrypt
    port: 9003
  inboundDecrypt:
    enabled: false
    name: inbound-decrypt
    port: 9004
  outboundDlp:
    enabled: true
    name: outbound-dlp
    port: 9005


# This will create a persistent volume for each 
# enabled gateway mode. This will keep your postfix queue 
# intact when pods are destroyed and recreated. You can modify
# the size of the volume below.

persistentVolumes:
  storageClassName: standard
  volumeSize: 1Gi

# Environment Variables:
# For descriptions of all variables, see the README.md file

gatewayAccountsUrl: http://gateway-virtru-proxy:8080/accounts
gatewayAcmUrl: https://api.virtru.com/acm
gatewayRemoteContentBaseUrl: https://secure.virtru.com/start

standardConfig:
  gatewayHostname: gw.example.com
  primaryMailingDomain: exmample.com
  # Next hop for Virtru gateway, typical mail flow is:
  # mail server => Virtru gateway => back to your mail server => final delivery
  gatewayTransportMaps: "*=>[smtp-relay.gmail.com]:587"
  # See README.md for Google or Microsoft relaying IPs,
  # default is open and to lock down firewall on the VPC
  inboundRelayAddresses: 0.0.0.0/0
  headers:
    xHeaderAuthEnabled: false
    # Secret managed in appSecrets.headers

# By default, you can create secrets using the keys below.
# Important note: Creating secrets in this way is a default option.
# While a simpler approach with fewer variables, it is recommended you use
# a third party secret storage option.

appSecrets:
  amplitudeToken: <your-amplitude-token>
  gatewayApiTokenName: <your-api-token>
  gatewayApiSecret: <your-api-secret>
  saslAuth:
    smtpDownstream:
      #Only configure if additionalConfig.saslAuth.smtpDownstream.enabled == true
      accounts: <your auth path smtp-relay.gmail.com=>service-account@example.com=>password>
    smtpdUpstream:
      #Only configure if additionalConfig.saslAuth.smtpdUpstream.enabled == true
      accounts: <your auth path smtp-relay.gmail.com=>service-account@example.com=>password>
  headers:
    #Only configure if standardConfig.headers.xHeaderAuthEnabled == true
    xHeaderAuthSecret: "<your auth secret 123456789>"
  dkimSigning:
    publicKey: |
      <dkim-public-key>
    privateKey: |
      <dkim-private-key>
  oidcClientSecret: <oidc-client-secret>
  
  

additionalConfig:
  saslAuth:
    smtpDownstream:
      enabled: false
      securityOptions: noanonymous
    smtpdUpstream:
      enabled: false
      mechanisms: PLAIN
  maxQueueLifetime: 5m
  maxBackoffTime: 45s
  minBackoffTime: 30s
  queueRunDelay: 30s
  smtpdUseTls: true
  smtpdSecurityLevel: opportunistic
  smtpdTlsComplianceUpstream:
    enabled: false
    compliance: MEDIUM
  smtpUseTls: true
  smtpSecurityLevel: opportunistic
  smtpTlsComplianceDownstream:
    enabled: false
    compliance: MEDIUM
  cks:
    keyProvider: NONE
    sessionKeyExpiry: "360"
  dlpRuleCache: "30"
  tlsPolicyMaps:
    enabled: false
    policyMaps: example.com=>none,example.net=>maybe
  replaceFromEnabled: "1"
  decryptPfpFiles: "1"
  decryptThenEncrypt: "0"
  proxyProtocol: "0"
  verboseLogging: "0"
  cacheSmtpConnections:
    enabled: true
    connectionCacheTimeLimit: 5s
  dkimSigning:
    enabled: false
    selector: gw
  abac:
    enabled: true
    oidcClientId: 12321
    oidcTokenUrl: some-token-url
    taggingPdpLocation: localhost:15001
    accessServiceUrl: localhost:1112 # If this is non-null && not an empty string, we will trigger ABAC processing.
    taggingConfig: #Used with set-file

istioIngress:
  enabled: false
  # Use an existing istio gateway
  existingGateway:
  # Name of istio gateway selector
  gatewaySelector: ingress
  ingressHostname: "*"
  name: scp
virtruProxy:
  enabled: false
  port: 8080
  image:
    repo: ghcr.io/virtru-corp/tagging-pdp/proxy-service
    tag: sha-ac36ab9
  imagePullSecret: gateway-pull-secrets
  configsvc:
    endpoint: http://configuration:8080/configuration